import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.neural_network import MLPClassifier

data = pd.read_excel('PAO1_peptide_ver3.xlsx')
X = data.drop(columns=['MIC', 'MIC_64'])
Y = data['MIC_64']

#data = pd.read_excel('antifungal_dataset_simple.xlsx')
#X = data.drop(columns=['MIC_64'])
#Y = data['MIC_64']
print(X)
print(Y)

# Standardize data
sc = StandardScaler()
X_scaled = sc.fit_transform(X)
X_scaled = pd.DataFrame(X_scaled, columns = X.columns, index = X.index.values.tolist())
# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.25, random_state=0, stratify= Y)

# Define classifiers and their parameters
classifiers = {
    'Random Forest Classifier_recall': {
        'model': RandomForestClassifier(class_weight='balanced_subsample', max_depth=24,  max_features='log2', min_samples_leaf=2,
                       min_samples_split=3, n_estimators=352, random_state=0, criterion='entropy', bootstrap=True),
        'X_train': X_train,
        'X_test': X_test
    },
    'RandomForestClassifier_f1': {
        'model': RandomForestClassifier(class_weight='balanced_subsample', max_depth=17, max_features='log2', min_samples_leaf=2,
               min_samples_split=5, n_estimators=83, random_state=0, criterion='log_loss', bootstrap=True),
        'X_train': X_train,
        'X_test': X_test
    },
    'DecisionTreeClassifier_recall':{
        'model': DecisionTreeClassifier(class_weight='balanced', criterion='log_loss',
                       max_depth=7, max_features='sqrt', min_samples_leaf=3, random_state=0),
        'X_train': X_train,
        'X_test': X_test
    },
    'DecisionTreeClassifier_f1':{
        'model': DecisionTreeClassifier(random_state=0, min_samples_leaf=2, max_features='sqrt',
                                max_depth=29, criterion='log_loss', class_weight='balanced',  splitter='best'),
        'X_train': X_train,
        'X_test': X_test
    },
    'SVC_recall': {
        'model': SVC(C=42.91202118185207, class_weight='balanced', gamma=0.9345349005944956, probability=True, kernel='rbf', random_state=0),
        'X_train': X_train,
        'X_test': X_test
    },
    'SVC_f1': {
        'model': SVC(kernel='poly', gamma=0.8623894310118404, class_weight='balanced', C=5.386511150786145, random_state=0, probability=True),
        'X_train': X_train,
        'X_test': X_test
    },
    'MLP_recall': {
        'model': MLPClassifier(activation='logistic', alpha=0.09516668953844117, hidden_layer_sizes=124, max_iter=460, random_state=0, solver='sgd', learning_rate='constant'),
        'X_train': X_train,
        'X_test': X_test
    },
    'MLP_f1': {
        'model': MLPClassifier(hidden_layer_sizes=96, learning_rate='adaptive', max_iter=327, solver='lbfgs', activation='tanh', alpha=0.05355471321902621, random_state=0),        'X_train': X_train,
        'X_test': X_test
    },
    'LogisticRegression_recall': {
        'model': LogisticRegression(C=38.49113423634941, class_weight='balanced', max_iter=408, random_state=0),
        'X_train': X_train,
        'X_test': X_test
    },
    'LogisticRegression_f1': {
        'model': LogisticRegression(random_state=0, max_iter=372, class_weight='balanced', C=17.072699413364575),
        'X_train': X_train,
        'X_test': X_test
    },
    'GaussianNB_recall': {
        'model': GaussianNB(var_smoothing=0.0004659511273518516),
        'X_train': X_train,
        'X_test': X_test
    },
    'GaussianNB_f1': {
        'model': GaussianNB(var_smoothing=0.05355471321902621),
        'X_train': X_train,
        'X_test': X_test
    },
    'KNeighborsClassifier_recall': {
        'model': KNeighborsClassifier(algorithm='ball_tree', leaf_size=43, n_neighbors=49),
        'X_train': X_train,
        'X_test': X_test
    },
    'KNeighborsClassifier_f1': {
        'model': KNeighborsClassifier(weights='distance', p=2, n_neighbors=11, leaf_size=3, algorithm='ball_tree'),
        'X_train': X_train,
        'X_test': X_test
    },
}

# Train and evaluate classifiers
for clf_name, clf_data in classifiers.items():
    model = clf_data['model']
    model.fit(clf_data['X_train'], Y_train.values.ravel())
    Y_pred = model.predict(clf_data['X_train'])
    cm = confusion_matrix(Y_train, Y_pred)
    TN, FP, FN, TP = cm.ravel()
    print("True Positive: ", TP)
    print("True Negative: ", TN)
    print("False Positive: ", FP)
    print("False Negative: ", FN)
    report = classification_report(Y_train, Y_pred, target_names=["Bad", "Good"])
    print(f"{clf_name} Train Set Classification Report:")
    print(report)

