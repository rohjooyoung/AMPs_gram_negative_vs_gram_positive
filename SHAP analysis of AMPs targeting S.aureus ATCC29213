import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import shap
from matplotlib.ticker import FormatStrFormatter
import pandas as pd
from sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve, auc


rfc = RandomForestClassifier(class_weight='balanced', max_depth=15, max_features='log2', min_samples_leaf=2, criterion='entropy',
                       min_samples_split=4, n_estimators=300, random_state=0, bootstrap=True)


data = pd.read_excel('SA_peptide_ver3.xlsx')
X = data.drop(columns=['MIC', 'MIC_64'])
Y = data['MIC_64']

# Standardize data
sc = StandardScaler()
X_scaled = sc.fit_transform(X)
X_scaled = pd.DataFrame(X_scaled, columns = X.columns, index = X.index.values.tolist())
# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.25, random_state=0, stratify= Y)

rfc = rfc.fit(X_train,Y_train.values.ravel())
Y_pred = rfc.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
TN, FP, FN, TP = cm.ravel()
print("True Positive: ", TP)
print("True Negative: ", TN)
print("False Positive: ", FP)
print("False Negative: ", FN)
report = classification_report(Y_test, Y_pred, target_names=["Bad", "Good"])

shap.initjs()

explainer = shap.TreeExplainer(rfc, X_scaled)
print(X.columns)
shap_values = explainer.shap_values(X_scaled, check_additivity=False)
print(shap_values)

mean_abs_shap_values = np.mean(np.abs(shap_values), axis=0)
print(mean_abs_shap_values[:,0])
print(mean_abs_shap_values[:,1])
total_mean_abs = mean_abs_shap_values[:,0] + mean_abs_shap_values[:,1]
print(total_mean_abs)
mean_shap_values_df_bad = pd.DataFrame({'Feature': X.columns, 'MeanAbsSHAP_Bad': mean_abs_shap_values[:,0]})
mean_shap_values_df_good = pd.DataFrame({'Feature': X.columns, 'MeanAbsSHAP_Good': mean_abs_shap_values[:,1]})
total_mean_abs_shap_values_df = pd.DataFrame({'Feature': X.columns, 'TotalMeanAbsSHAP': total_mean_abs})

# Sort values in descending order
mean_shap_values_df_bad = mean_shap_values_df_bad.sort_values(by='MeanAbsSHAP_Bad', ascending=False)
print(f"These are the mean SHAP values (Class 0): {mean_shap_values_df_bad}.")
mean_shap_values_df_good = mean_shap_values_df_good.sort_values(by='MeanAbsSHAP_Good', ascending=False)
total_mean_abs_shap_values_df= total_mean_abs_shap_values_df.sort_values(by='TotalMeanAbsSHAP', ascending = False)
# Create bar plot
plt.figure(figsize=(60, 50))
plt.rcParams['font.family'] = 'Times New Roman'
plt.bar(mean_shap_values_df_bad['Feature'], mean_shap_values_df_bad['MeanAbsSHAP_Bad'], color='red')
plt.ylabel('Mean |SHAP value|', size = 80)
plt.xlabel('Feature', size = 80)
plt.yticks(size = 80)
plt.xticks(rotation = 15, ha = "right", size = 60)
plt.title('Feature Importance - Mean Absolute SHAP Values S.aureus ATCC 29213', size = 80)
plt.autoscale()
plt.show()

# Top ten most important features that influence SHAP for MIC64 = Cat1
index_of_cLogP_predicted = data.columns.get_loc('CLogP_rdkit')
index_of_peptide_length = data.columns.get_loc('peptide length')
index_of_neutral = data.columns.get_loc('has_neutral')
index_of_anionic = data.columns.get_loc('has_anionic')
index_of_hydrophobic = data.columns.get_loc('hydrophobic_composition')
index_of_cationic = data.columns.get_loc('cationic_composition')
index_of_has_aromatic = data.columns.get_loc('has_aromatic')
index_of_net_charge = data.columns.get_loc('net_charge')

Y_net_charge = shap_values[:,index_of_net_charge][:,0]
X_net_charge = X['net_charge']

Y_neutral = shap_values[:,index_of_neutral][:,0]
X_neutral = X['has_neutral']

Y_anionic = shap_values[:,index_of_anionic][:,0]
X_anionic = X['has_anionic']

Y_hydrophobic = shap_values[:,index_of_hydrophobic][:,0]
X_hydrophobic = X['hydrophobic_composition']

Y_has_aromatic = shap_values[:,index_of_has_aromatic][:,0]
X_has_aromatic = X['has_aromatic']

# Most important feature DP
Y_cationic = shap_values[:,index_of_cationic][:,0]
X_cationic = X['cationic_composition']


#plt.scatter(X_DP, Y_DP, color = 'red', s = 10)
#plt.xlabel('DP')
#plt.ylabel('SHAP value (Bad)')
#plt.title('The relationship between SHAP value (Bad) and DP')

# 2nd important feature hydrophilic composition
#plt.scatter(X_hydrophilic_composition, Y_hydrophilic_composition, color = 'red', s = 10)
#plt.xlabel('Hydrophilic composition')
#plt.ylabel('SHAP value (Bad)')
#plt.title('The relationship between SHAP value (Bad) and hydrophilic composition')

Y_peptide_length = shap_values[:,index_of_peptide_length][:,0]
X_peptide_length = X['peptide length']

# 3rd important feature cLogP

Y_cLogP_predicted_bad = shap_values[:,index_of_cLogP_predicted][:,0]
X_cLogP_predicted = X['CLogP_rdkit']


fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(16, 12))
# plot on each of the subplots

axes[0, 0].scatter(X_cLogP_predicted, Y_cLogP_predicted_bad,color = 'red', s=10)
axes[0, 0].set_xlabel('cLogP',fontsize=16)
axes[0, 0].axhline(y=0, color='k', linestyle='dotted')
axes[0, 0].axvline(x=-6, color='k', linestyle='dotted')
axes[0, 0].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[0, 0].tick_params(axis='y', labelsize=16)
axes[0, 0].tick_params(axis='x', labelsize=16)

axes[0, 1].scatter(X_hydrophobic, Y_hydrophobic,color = 'red', s=10)
axes[0, 1].set_xlabel('hydrophobic_composition',fontsize=16)
axes[0, 1].axhline(y=0, color='k', linestyle='dotted')
axes[0, 1].axvline(x=0.30, color='k', linestyle='dotted')
axes[0, 1].axvline(x=0.40, color='k', linestyle='dotted')
axes[0, 1].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[0, 1].tick_params(axis='y', labelsize=16)
axes[0, 1].tick_params(axis='x', labelsize=16)

axes[0, 2].scatter(X_net_charge, Y_net_charge,color = 'red', s=10)
axes[0, 2].set_xlabel('net_charge',fontsize=16)
axes[0, 2].axhline(y=0, color='k', linestyle='dotted')
axes[0, 2].axvline(x=3, color='k', linestyle='dotted')
axes[0, 2].axvline(x=4, color='k', linestyle='dotted')
axes[0, 2].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[0, 2].tick_params(axis='y', labelsize=16)
axes[0, 2].tick_params(axis='x', labelsize=16)

axes[1, 0].scatter(X_neutral, Y_neutral,color = 'red', s=10)
axes[1, 0].set_xlabel('has_neutral',fontsize=16)
axes[1, 0].axhline(y=0, color='k', linestyle='dotted')
axes[1, 0].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[1, 0].tick_params(axis='y', labelsize=16)
axes[1, 0].tick_params(axis='x', labelsize=16)

axes[1, 1].scatter(X_cationic, Y_cationic,color = 'red', s=10)
axes[1, 1].set_xlabel('cationic_composition',fontsize=16)
axes[1, 1].axhline(y=0, color='k', linestyle='dotted')
axes[1, 1].axvline(x=0.30, color='k', linestyle='dotted')
axes[1, 1].axvline(x=0.40, color='k', linestyle='dotted')
axes[1, 1].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[1, 1].tick_params(axis='y', labelsize=16)
axes[1, 1].tick_params(axis='x', labelsize=16)

axes[1, 2].scatter(X_has_aromatic, Y_has_aromatic,color = 'red', s=10)
axes[1, 2].set_xlabel('has_aromatic',fontsize=16)
axes[1, 2].axhline(y=0, color='k', linestyle='dotted')
axes[1, 2].yaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{val:.3f}'))
axes[1, 2].tick_params(axis='y', labelsize=16)
axes[1, 2].tick_params(axis='x', labelsize=16)

# set overall title and adjust subplot spacing
plt.rcParams['font.family'] = 'Times New Roman'
plt.subplots_adjust(hspace=0.4, wspace=0.3)
#fig.text(0.5, 0.03, 'feature values', ha'center', va='center', fontsize=14)
fig.text(0.03, 0.5, 'SHAP values Class0: MIC>64', ha='center', va='center', rotation='vertical', fontsize=24)
plt.rcParams['font.family'] = 'Times New Roman'
plt.show()

plt.scatter(X_peptide_length, Y_peptide_length, color = 'red', s=10)
plt.xlabel('peptide length', fontsize=16)
plt.axhline(y=0.0, color='k', linestyle='dotted')
plt.show()
